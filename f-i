#!/usr/bin/python

"""
[fTerm] f-i

This program is the main file for fTerm.
"""

# NOTE: this is extraneous
# pylint: disable=C0103

# NOTE: this would make line 19 unreadable
# pylint: disable=C0301

# allows parsing of arguments and calling exit
import sys

# parser
import parser

# import actual functions
from load import verbs

def shellquote(s):
    """Fix quotes for terminal."""
    return "'" + s.replace("'", "\\'") + "'"

def escape_spaces(s):
    """Escape spaces on a string."""
    return s.replace(" ", "\\ ")

def adjectives_and_nouns(args):
    """Find adjectives in arguments."""
    #print args
    adj = []
    nouns = []
    switch = 0
    for item in args:
        # check if brackets are around arguments
        if item[0] == "[" and item[-1] == "]":
            adj.append(item[1:-1])
            switch = 0
            continue
        elif item[0] == "[":
            switch = 1
            adj.append(item[1:])
        elif item[-1] == "]":
            adj.append(item[:-1])
            switch = 0
        # add to appropriate lists
        if switch == 1:
            switch = 2
        elif switch == 2:
            adj.append(item)
            switch = 0
        else:
            nouns.append(item)
    return (adj, nouns)
        
def run(argv):
    """The main function for fTerm"""
    if len(argv) < 2:
        print "echo '[f-i] Please specify a command (e.g., f swap file1 file2)';"
        return
    
    cmd, args = argv[1], argv[2:]
    
    try:
        suggestion = "[f-i] "
        f = parser.parse(cmd)
        suggestion += f
        f = verbs[f]
    except (KeyError, IndexError):
        print "echo '[f-i] Invalid function %s';" % (cmd),
        return
    adj, nouns = adjectives_and_nouns([shellquote(escape_spaces(x)) for x in args])
    #suggestion += " " + " ".join(args)
    try:
        if not adj:
            print "read -p \'{0}\' -n 1 -r; if [[ $REPLY =~ ^$ ]]; then F=\"{1}\"; {1} fi".format(suggestion, f(*nouns, adjectives=adj))
        else:
            try:
                print "read -p \'{0}\' -n 1 -r; if [[ $REPLY =~ ^$ ]]; then F=\"{1}\"; {1} fi".format(suggestion, f(*nouns))
            except TypeError:
                print "read -p \'{0}\' -n 1 -r; if [[ $REPLY =~ ^$ ]]; then F=\"{1}\"; {1} fi".format(suggestion, f(*nouns))
    except TypeError:
        print "echo '[f-i] Wrong number of arguments for function %s';" % (cmd)

run(sys.argv)
